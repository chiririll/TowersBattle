//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Settings/Input/GameInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace TowersBattle.Input
{
    public partial class @GameInput : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @GameInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInput"",
    ""maps"": [
        {
            ""name"": ""GameActions"",
            ""id"": ""3d5c9c4a-a7d7-423d-a82d-0502e13e7e08"",
            ""actions"": [
                {
                    ""name"": ""CameraMove"",
                    ""type"": ""PassThrough"",
                    ""id"": ""265e388b-894b-4edb-bb4c-7c1ee565e3a5"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraZoom"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d6fd4d9b-6beb-48f6-8d58-c64b8e502c81"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""2dcb6bea-0b61-463a-906c-67b237f80717"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Mouse"",
                    ""id"": ""59fc1019-e7ae-40d0-9e3f-a3bf32abb466"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""10b46e7b-8e78-455d-98d0-f8e73b780493"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""951ef675-e6ca-4e5e-af63-7db754bd8edb"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""23eee07f-0b49-4145-bcd5-f6e022db7b00"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": ""Normalize(min=-1,max=1)"",
                    ""groups"": """",
                    ""action"": ""CameraZoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // GameActions
            m_GameActions = asset.FindActionMap("GameActions", throwIfNotFound: true);
            m_GameActions_CameraMove = m_GameActions.FindAction("CameraMove", throwIfNotFound: true);
            m_GameActions_CameraZoom = m_GameActions.FindAction("CameraZoom", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // GameActions
        private readonly InputActionMap m_GameActions;
        private IGameActionsActions m_GameActionsActionsCallbackInterface;
        private readonly InputAction m_GameActions_CameraMove;
        private readonly InputAction m_GameActions_CameraZoom;
        public struct GameActionsActions
        {
            private @GameInput m_Wrapper;
            public GameActionsActions(@GameInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @CameraMove => m_Wrapper.m_GameActions_CameraMove;
            public InputAction @CameraZoom => m_Wrapper.m_GameActions_CameraZoom;
            public InputActionMap Get() { return m_Wrapper.m_GameActions; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GameActionsActions set) { return set.Get(); }
            public void SetCallbacks(IGameActionsActions instance)
            {
                if (m_Wrapper.m_GameActionsActionsCallbackInterface != null)
                {
                    @CameraMove.started -= m_Wrapper.m_GameActionsActionsCallbackInterface.OnCameraMove;
                    @CameraMove.performed -= m_Wrapper.m_GameActionsActionsCallbackInterface.OnCameraMove;
                    @CameraMove.canceled -= m_Wrapper.m_GameActionsActionsCallbackInterface.OnCameraMove;
                    @CameraZoom.started -= m_Wrapper.m_GameActionsActionsCallbackInterface.OnCameraZoom;
                    @CameraZoom.performed -= m_Wrapper.m_GameActionsActionsCallbackInterface.OnCameraZoom;
                    @CameraZoom.canceled -= m_Wrapper.m_GameActionsActionsCallbackInterface.OnCameraZoom;
                }
                m_Wrapper.m_GameActionsActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @CameraMove.started += instance.OnCameraMove;
                    @CameraMove.performed += instance.OnCameraMove;
                    @CameraMove.canceled += instance.OnCameraMove;
                    @CameraZoom.started += instance.OnCameraZoom;
                    @CameraZoom.performed += instance.OnCameraZoom;
                    @CameraZoom.canceled += instance.OnCameraZoom;
                }
            }
        }
        public GameActionsActions @GameActions => new GameActionsActions(this);
        public interface IGameActionsActions
        {
            void OnCameraMove(InputAction.CallbackContext context);
            void OnCameraZoom(InputAction.CallbackContext context);
        }
    }
}
