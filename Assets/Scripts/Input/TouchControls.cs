//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Settings/Input/TouchControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace TowersBattle.Input
{
    public partial class @TouchControls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @TouchControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""TouchControls"",
    ""maps"": [
        {
            ""name"": ""Pinch"",
            ""id"": ""6e862160-6978-4b49-bbe7-683309448d34"",
            ""actions"": [
                {
                    ""name"": ""PrimaryFingerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""f4073b48-f8fb-4957-9897-d971dee40e18"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondaryFingerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""e34dd558-c18e-43ac-b729-971f8ba31e28"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondaryTouchContact"",
                    ""type"": ""Button"",
                    ""id"": ""01ec8fd6-8b32-4d51-b6cc-2260ba55d6d9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e98b22dc-a094-4200-b405-ab965f7bb7bf"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryFingerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7990ddc2-87d0-4a76-aa1a-ddcd414cc255"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryFingerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b3dbc09e-3eb8-4858-898e-2c547b4aaee8"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryTouchContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Pinch
            m_Pinch = asset.FindActionMap("Pinch", throwIfNotFound: true);
            m_Pinch_PrimaryFingerPosition = m_Pinch.FindAction("PrimaryFingerPosition", throwIfNotFound: true);
            m_Pinch_SecondaryFingerPosition = m_Pinch.FindAction("SecondaryFingerPosition", throwIfNotFound: true);
            m_Pinch_SecondaryTouchContact = m_Pinch.FindAction("SecondaryTouchContact", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Pinch
        private readonly InputActionMap m_Pinch;
        private IPinchActions m_PinchActionsCallbackInterface;
        private readonly InputAction m_Pinch_PrimaryFingerPosition;
        private readonly InputAction m_Pinch_SecondaryFingerPosition;
        private readonly InputAction m_Pinch_SecondaryTouchContact;
        public struct PinchActions
        {
            private @TouchControls m_Wrapper;
            public PinchActions(@TouchControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @PrimaryFingerPosition => m_Wrapper.m_Pinch_PrimaryFingerPosition;
            public InputAction @SecondaryFingerPosition => m_Wrapper.m_Pinch_SecondaryFingerPosition;
            public InputAction @SecondaryTouchContact => m_Wrapper.m_Pinch_SecondaryTouchContact;
            public InputActionMap Get() { return m_Wrapper.m_Pinch; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PinchActions set) { return set.Get(); }
            public void SetCallbacks(IPinchActions instance)
            {
                if (m_Wrapper.m_PinchActionsCallbackInterface != null)
                {
                    @PrimaryFingerPosition.started -= m_Wrapper.m_PinchActionsCallbackInterface.OnPrimaryFingerPosition;
                    @PrimaryFingerPosition.performed -= m_Wrapper.m_PinchActionsCallbackInterface.OnPrimaryFingerPosition;
                    @PrimaryFingerPosition.canceled -= m_Wrapper.m_PinchActionsCallbackInterface.OnPrimaryFingerPosition;
                    @SecondaryFingerPosition.started -= m_Wrapper.m_PinchActionsCallbackInterface.OnSecondaryFingerPosition;
                    @SecondaryFingerPosition.performed -= m_Wrapper.m_PinchActionsCallbackInterface.OnSecondaryFingerPosition;
                    @SecondaryFingerPosition.canceled -= m_Wrapper.m_PinchActionsCallbackInterface.OnSecondaryFingerPosition;
                    @SecondaryTouchContact.started -= m_Wrapper.m_PinchActionsCallbackInterface.OnSecondaryTouchContact;
                    @SecondaryTouchContact.performed -= m_Wrapper.m_PinchActionsCallbackInterface.OnSecondaryTouchContact;
                    @SecondaryTouchContact.canceled -= m_Wrapper.m_PinchActionsCallbackInterface.OnSecondaryTouchContact;
                }
                m_Wrapper.m_PinchActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @PrimaryFingerPosition.started += instance.OnPrimaryFingerPosition;
                    @PrimaryFingerPosition.performed += instance.OnPrimaryFingerPosition;
                    @PrimaryFingerPosition.canceled += instance.OnPrimaryFingerPosition;
                    @SecondaryFingerPosition.started += instance.OnSecondaryFingerPosition;
                    @SecondaryFingerPosition.performed += instance.OnSecondaryFingerPosition;
                    @SecondaryFingerPosition.canceled += instance.OnSecondaryFingerPosition;
                    @SecondaryTouchContact.started += instance.OnSecondaryTouchContact;
                    @SecondaryTouchContact.performed += instance.OnSecondaryTouchContact;
                    @SecondaryTouchContact.canceled += instance.OnSecondaryTouchContact;
                }
            }
        }
        public PinchActions @Pinch => new PinchActions(this);
        public interface IPinchActions
        {
            void OnPrimaryFingerPosition(InputAction.CallbackContext context);
            void OnSecondaryFingerPosition(InputAction.CallbackContext context);
            void OnSecondaryTouchContact(InputAction.CallbackContext context);
        }
    }
}
